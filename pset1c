'''MIT 6.0001 PROBLEM SET 1C ANSWERS'''



'''9;57 am 20th,nov, 2017'''
'''i_me_you'''

semi_annual_raise = 0.07
r = 0.04
total_cost = 1000000
portion_down_payment = 0.25 * total_cost
starting_salary = int(input('Enter your starting salary:'))
numMonths = 36
epsilon = 100
minR = 0
maxR = 10000
steps = 0
worked = False #c_savings - p_d_p < 100
current_savings = 0
portion_saved = int((maxR+minR)/2)
while abs(minR - maxR) > 1:
  current_savings = 0.0
  annual_salary = starting_salary
  steps += 1
  monthly_saved = (annual_salary/12) * (portion_saved/10000)
  monthly_inc = current_savings * (r/12)
  for rate in range (1,numMonths + 1):
    current_savings += monthly_saved + monthly_inc
  
    if abs(current_savings - portion_down_payment) < epsilon:
      minR = maxR
      worked = True
      break
    elif current_savings > portion_down_payment + epsilon:
      break
  
  
    if rate%6 == 0:
      annual_salary += semi_annual_raise * annual_salary
      monthly_saved = (annual_salary/12) * (portion_saved/10000)
    
  if current_savings < portion_down_payment - epsilon:
    minR = portion_saved
  elif current_savings > portion_down_payment + epsilon:
    maxR = portion_saved
  portion_saved = int((maxR+minR)/2)
if worked:
  print ('best_savings_rate:', portion_saved/10000, 'bisectionSteps:' ,steps, )
else:
  print('its not possible to save up for a down payment with that amount')

#not tested yet ...
#used sturrion's as reference
